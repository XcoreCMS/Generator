<?php
declare(strict_types=1);

namespace Xcore\Generator\Doctrine\ORM\Entity;

use Doctrine\ORM\Mapping\ClassMetadataInfo;
use Xcore\Generator\Doctrine\ORM\Entity\Assert\Assert;
use Xcore\Generator\Doctrine\ORM\Entity\Association\Association;
use Xcore\Generator\Doctrine\ORM\Entity\Property\GetterType;
use Xcore\Generator\Doctrine\ORM\Entity\Property\GetterTypeTrait;
use Xcore\Generator\Doctrine\ORM\Entity\Property\NullableTrait;
use Xcore\Generator\Doctrine\ORM\Entity\Property\Property;
use Xcore\Generator\Doctrine\ORM\Entity\Property\SetterTrait;
use Xcore\Generator\Doctrine\ORM\Entity\Property\Visibility;
use Xcore\Generator\Doctrine\ORM\Entity\Property\VisibilityTrait;

final class Entity
{
    use VisibilityTrait;
    use AutogeneratedIdsTrait;
    use GetterTypeTrait;
    use SetterTrait;
    use NullableTrait;

    /**
     * @var string
     */
    private $className;

    /**
     * @var null|string
     */
    private $tableName;

    /**
     * @var Property[]
     */
    private $properties = [];

    /**
     * @var Association[]
     */
    private $associations = [];

    /**
     * @var string[]
     */
    private $propertyNames = [];

    /**
     * @var string
     */
    private $outputDirectory;

    /**
     * @var string[]
     */
    private $ids = [];

    /**
     * @var Assert[]
     */
    private $asserts = [];

    public function __construct(string $className, bool $nullable, Visibility $visibility, ?GetterType $getter, bool $setter)
    {
        $this->className = $className;
        $this->nullable = $nullable;
        $this->visibility = $visibility;
        $this->getter = $getter;
        $this->setter = $setter;
    }

    public function getClassName(): string
    {
        return $this->className;
    }

    public function getClassBasename(): string
    {
        $path = explode('\\', $this->className);
        return array_pop($path);
    }

    public function getNamespace(): string
    {
        $classBasename = $this->getClassBasename();
        return str_replace("\\$classBasename", '', $this->getClassName());
    }

    public function setNamespace(string $namespace): void
    {
        $this->className = $namespace.'\\'.$this->getClassBasename();
    }

    public function getTraitName(): string
    {
        return "{$this->className}Trait";
    }

    public function getTableName(): ?string
    {
        return $this->tableName;
    }

    public function setTableName(?string $tableName): void
    {
        $this->tableName = $tableName;
    }

    /**
     * @return string[]
     */
    public function getIds(): array
    {
        return $this->ids;
    }

    /**
     * Returns array compatible with Doctrine table definition
     *
     * name => <tableName>
     * schema => <schemaName>
     * indexes => array
     * uniqueConstraints => array
     *
     * @see ClassMetadataInfo::table
     *
     * @return array
     */
    public function getTable(): array
    {
        return [
            'name' => $this->tableName
        ];
    }

    /**
     * @return Property[]
     */
    public function getProperties(): array
    {
        return $this->properties;
    }

    public function hasPropertyWithName(string $name): bool
    {
        return in_array($name, $this->propertyNames);
    }

    public function addProperty(Property $property): void
    {
        if ($property->isId()) {
            $this->ids[] = $property->getName();
        }

        $this->properties[] = $property;
        $this->propertyNames[] = $property->getName();
    }

    /**
     * @return Association[]
     */
    public function getAssociations(): array
    {
        return $this->associations;
    }

    public function addAssociation(Association $association): void
    {
        $this->associations[] = $association;
    }

    public function getOutputDirectory(): string
    {
        return $this->outputDirectory;
    }

    public function setOutputDirectory(string $outputDirectory): void
    {
        $this->outputDirectory = $outputDirectory;
    }

    /**
     * @return Assert[]
     */
    public function getAsserts(): array
    {
        return $this->asserts;
    }

    public function addAssert(Assert $assert): void
    {
        $this->asserts[] = $assert;
    }

    public function setAsserts(array $asserts): void
    {
        $this->asserts = $asserts;
    }
}
